generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
}

model User {
  id             String         @id @default(uuid())
  kindeId        String         @unique // From Kinde sub claim
  email          String         @unique
  name           String
  role           Role           @default(CLIENT)
  sendingDomains SendingDomain[]
  createdAt      DateTime       @default(now())
}

model SendingDomain {
  id         String       @id @default(uuid())
  domain     String       @unique // e.g. emailit.dev
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  emailEvents EmailEvent[]
  createdAt  DateTime     @default(now())
  summaryStats  SummaryStats?
}

model EmailEvent {
  id             String       @id @default(uuid())
  webhookEventId String       @unique // for deduplication (from event_id)
  messageId      String       @unique // from object.email.message_id
  status         String
  type           String       // e.g. email.delivery.sent
  recipient      String       // object.email.to
  sender         String       // object.email.from
  subject        String
  sentWithSSL    Boolean
  timeTaken      Float?
  spamStatus     Int?
  details        String?
  timestamp      Float         // object.timestamp (unix)
  sendingDomainId String
  sendingDomain  SendingDomain @relation(fields: [sendingDomainId], references: [id])
  createdAt      DateTime      @default(now())
}

model SummaryStats {
  id              String       @id @default(uuid())
  sendingDomainId String       @unique
  sendingDomain   SendingDomain @relation(fields: [sendingDomainId], references: [id])
  totalSent       Int          @default(0)
  totalDelivered  Int          @default(0)
  totalFailed     Int          @default(0)
  lastUpdated     DateTime     @updatedAt
}